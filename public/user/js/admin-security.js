/**
 * üîí ADMIN SECURITY SYSTEM
 * H·ªá th·ªëng b·∫£o m·∫≠t chung cho t·∫•t c·∫£ trang admin
 * √Åp d·ª•ng cho to√†n b·ªô d·ª± √°n eTax
 */

// ===== ADMIN CREDENTIALS =====
const ADMIN_CREDENTIALS = {
    'admin': 'Baoan2022@',
    'nghia': 'nghia2024'
};

// ===== SECURITY FUNCTIONS =====

/**
 * Ki·ªÉm tra quy·ªÅn truy c·∫≠p admin
 * @returns {boolean} true n·∫øu c√≥ quy·ªÅn, false n·∫øu kh√¥ng
 */
function checkAdminAccess() {
    const adminData = localStorage.getItem('etax_admin');
    
    if (!adminData) {
        console.log('üîí Kh√¥ng c√≥ session admin');
        redirectToLogin();
        return false;
    }
    
    try {
        const admin = JSON.parse(adminData);
        
        // Ki·ªÉm tra format d·ªØ li·ªáu
        if (!admin.username || !admin.isLoggedIn || !admin.expiresAt) {
            console.log('üîí Format session admin kh√¥ng h·ª£p l·ªá');
            clearAdminSession();
            redirectToLogin();
            return false;
        }
        
        // Ki·ªÉm tra th·ªùi gian h·∫øt h·∫°n
        if (admin.expiresAt < Date.now()) {
            console.log('üîí Session admin ƒë√£ h·∫øt h·∫°n');
            clearAdminSession();
            redirectToLogin();
            return false;
        }
        
        // Ki·ªÉm tra username c√≥ h·ª£p l·ªá kh√¥ng
        if (!ADMIN_CREDENTIALS[admin.username]) {
            console.log('üîí Username admin kh√¥ng h·ª£p l·ªá');
            clearAdminSession();
            redirectToLogin();
            return false;
        }
        
        console.log('‚úÖ Admin access granted:', admin.username);
        return true;
        
    } catch (error) {
        console.error('üîí L·ªói parse admin session:', error);
        clearAdminSession();
        redirectToLogin();
        return false;
    }
}

/**
 * T·∫°o session admin m·ªõi
 * @param {string} username - T√™n ƒëƒÉng nh·∫≠p admin
 * @param {string} password - M·∫≠t kh·∫©u admin
 * @returns {boolean} true n·∫øu ƒëƒÉng nh·∫≠p th√†nh c√¥ng
 */
function createAdminSession(username, password) {
    if (!ADMIN_CREDENTIALS[username] || ADMIN_CREDENTIALS[username] !== password) {
        console.log('üîí Th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng ƒë√∫ng');
        return false;
    }
    
    const adminData = {
        username: username,
        isLoggedIn: true,
        loginTime: new Date().toISOString(),
        expiresAt: Date.now() + (24 * 60 * 60 * 1000), // 24 gi·ªù
        lastActivity: Date.now()
    };
    
    localStorage.setItem('etax_admin', JSON.stringify(adminData));
    console.log('‚úÖ Admin session created:', username);
    return true;
}

/**
 * C·∫≠p nh·∫≠t th·ªùi gian ho·∫°t ƒë·ªông cu·ªëi
 */
function updateAdminActivity() {
    const adminData = localStorage.getItem('etax_admin');
    if (adminData) {
        try {
            const admin = JSON.parse(adminData);
            admin.lastActivity = Date.now();
            localStorage.setItem('etax_admin', JSON.stringify(admin));
        } catch (error) {
            console.error('üîí L·ªói c·∫≠p nh·∫≠t activity:', error);
        }
    }
}

/**
 * X√≥a session admin
 */
function clearAdminSession() {
    localStorage.removeItem('etax_admin');
    console.log('üîí Admin session cleared');
}

/**
 * Chuy·ªÉn h∆∞·ªõng v·ªÅ trang ƒëƒÉng nh·∫≠p
 */
function redirectToLogin() {
    window.location.href = '/admin/admin-login.html';
}

/**
 * L·∫•y th√¥ng tin admin hi·ªán t·∫°i
 * @returns {object|null} Th√¥ng tin admin ho·∫∑c null
 */
function getCurrentAdmin() {
    const adminData = localStorage.getItem('etax_admin');
    if (!adminData) return null;
    
    try {
        return JSON.parse(adminData);
    } catch (error) {
        console.error('üîí L·ªói parse admin data:', error);
        return null;
    }
}

/**
 * Logout admin
 */
function adminLogout() {
    clearAdminSession();
    redirectToLogin();
}

// ===== AUTO SECURITY CHECKS =====

// Ki·ªÉm tra b·∫£o m·∫≠t khi load trang (CH·ªà CH·∫†Y TR√äN TRANG ADMIN, KH√îNG CH·∫†Y TR√äN TRANG LOGIN)
document.addEventListener('DOMContentLoaded', function() {
    console.log('üîí Admin Security System loaded');
    
    // ‚úÖ KI·ªÇM TRA: Ch·ªâ ch·∫°y security check n·∫øu KH√îNG ph·∫£i trang login
    const currentPage = window.location.pathname;
    const isLoginPage = currentPage.includes('/admin/admin-login.html') || 
                       currentPage.includes('login.html') ||
                       currentPage === '/' ||
                       currentPage === '/index.html';
    
    if (isLoginPage) {
        console.log('üîí Login page detected - skipping security check');
        return; // Kh√¥ng ch·∫°y security check tr√™n trang login
    }
    
    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p (ch·ªâ tr√™n trang admin)
    if (!checkAdminAccess()) {
        return;
    }
    
    // C·∫≠p nh·∫≠t activity
    updateAdminActivity();
    
    // Ki·ªÉm tra activity ƒë·ªãnh k·ª≥ (m·ªói 5 ph√∫t)
    setInterval(() => {
        const admin = getCurrentAdmin();
        if (admin && (Date.now() - admin.lastActivity) > (30 * 60 * 1000)) { // 30 ph√∫t kh√¥ng ho·∫°t ƒë·ªông
            console.log('üîí Admin session timeout due to inactivity');
            clearAdminSession();
            redirectToLogin();
        }
    }, 5 * 60 * 1000);
    
    // C·∫≠p nh·∫≠t activity khi user t∆∞∆°ng t√°c
    ['click', 'keypress', 'scroll', 'mousemove'].forEach(event => {
        document.addEventListener(event, updateAdminActivity, { passive: true });
    });
});

// ===== EXPORT FUNCTIONS =====
window.AdminSecurity = {
    checkAdminAccess,
    createAdminSession,
    updateAdminActivity,
    clearAdminSession,
    redirectToLogin,
    getCurrentAdmin,
    adminLogout
};
