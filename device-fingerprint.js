// ===== DEVICE FINGERPRINT SYSTEM =====
// File: device-fingerprint.js
// Ch·ª©c nƒÉng: T·∫°o d·∫•u v√¢n tay thi·∫øt b·ªã duy nh·∫•t v√† qu·∫£n l√Ω thi·∫øt b·ªã tin c·∫≠y

class DeviceFingerprint {
  constructor() {
    this.fingerprint = null;
    this.isInitialized = false;
  }

  // üîç T·∫°o d·∫•u v√¢n tay thi·∫øt b·ªã
  async generateFingerprint() {
    try {
      const components = {
        // Th√¥ng tin c∆° b·∫£n
        userAgent: navigator.userAgent,
        language: navigator.language,
        languages: navigator.languages ? navigator.languages.join(',') : '',
        platform: navigator.platform,
        cookieEnabled: navigator.cookieEnabled,
        
        // Th√¥ng tin m√†n h√¨nh
        screenWidth: screen.width,
        screenHeight: screen.height,
        screenColorDepth: screen.colorDepth,
        screenPixelDepth: screen.pixelDepth,
        
        // Th√¥ng tin timezone
        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
        timezoneOffset: new Date().getTimezoneOffset(),
        
        // Th√¥ng tin tr√¨nh duy·ªát
        hardwareConcurrency: navigator.hardwareConcurrency || 0,
        maxTouchPoints: navigator.maxTouchPoints || 0,
        
        // Canvas fingerprint (unique cho m·ªói thi·∫øt b·ªã)
        canvas: this.getCanvasFingerprint(),
        
        // WebGL fingerprint
        webgl: this.getWebGLFingerprint()
      };

      // T·∫°o hash t·ª´ t·∫•t c·∫£ components
      const fingerString = JSON.stringify(components);
      this.fingerprint = await this.hashString(fingerString);
      this.isInitialized = true;
      
      console.log('üîç Device fingerprint generated:', this.fingerprint.substring(0, 16) + '...');
      return this.fingerprint;
      
    } catch (error) {
      console.error('‚ùå Error generating fingerprint:', error);
      // Fallback fingerprint n·∫øu c√≥ l·ªói
      this.fingerprint = 'FALLBACK_' + Date.now() + '_' + Math.random().toString(36);
      return this.fingerprint;
    }
  }

  // üé® Canvas fingerprint
  getCanvasFingerprint() {
    try {
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      
      ctx.textBaseline = 'top';
      ctx.font = '14px Arial';
      ctx.fillText('eTax Mobile Device üè¢üì±', 2, 2);
      
      ctx.fillStyle = 'rgba(102, 204, 0, 0.7)';
      ctx.fillRect(100, 5, 80, 20);
      
      return canvas.toDataURL();
    } catch (error) {
      return 'canvas_error';
    }
  }

  // üñ•Ô∏è WebGL fingerprint
  getWebGLFingerprint() {
    try {
      const canvas = document.createElement('canvas');
      const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
      
      if (!gl) return 'no_webgl';
      
      const renderer = gl.getParameter(gl.RENDERER);
      const vendor = gl.getParameter(gl.VENDOR);
      
      return vendor + '|' + renderer;
    } catch (error) {
      return 'webgl_error';
    }
  }

  // üîê Hash string using Web Crypto API
  async hashString(str) {
    try {
      const encoder = new TextEncoder();
      const data = encoder.encode(str);
      const hash = await crypto.subtle.digest('SHA-256', data);
      
      // Convert to hex string
      const hashArray = Array.from(new Uint8Array(hash));
      return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
    } catch (error) {
      // Fallback hash n·∫øu Web Crypto API kh√¥ng kh·∫£ d·ª•ng
      return this.simpleHash(str);
    }
  }

  // üìù Simple hash fallback
  simpleHash(str) {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      const char = str.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // Convert to 32-bit integer
    }
    return Math.abs(hash).toString(16);
  }

  // üì± L·∫•y fingerprint hi·ªán t·∫°i
  async getFingerprint() {
    if (!this.isInitialized) {
      await this.generateFingerprint();
    }
    return this.fingerprint;
  }

  // üîÑ Refresh fingerprint
  async refresh() {
    this.isInitialized = false;
    return await this.generateFingerprint();
  }
}

// ===== TRUSTED DEVICE MANAGER =====
class TrustedDeviceManager {
  constructor(firebase_db) {
    this.db = firebase_db;
    this.deviceFingerprint = new DeviceFingerprint();
  }

  // ‚úÖ Ki·ªÉm tra thi·∫øt b·ªã ƒë√£ tin c·∫≠y
  async isDeviceTrusted(userId = null) {
    try {
      const fingerprint = await this.deviceFingerprint.getFingerprint();
      
      console.log('üîç Checking trusted device for fingerprint:', fingerprint.substring(0, 16) + '...');
      
      // Ki·ªÉm tra trong database
      const trustedDevicesSnapshot = await this.db.ref('trustedDevices').once('value');
      const trustedDevices = trustedDevicesSnapshot.val() || {};
      
      // T√¨m device theo fingerprint
      for (const deviceId in trustedDevices) {
        const device = trustedDevices[deviceId];
        if (device.fingerprint === fingerprint) {
          // Ki·ªÉm tra th√™m userId n·∫øu ƒë∆∞·ª£c cung c·∫•p
          if (userId && device.userId !== userId) {
            continue;
          }
          
          console.log('‚úÖ Device is trusted:', device);
          
          // C·∫≠p nh·∫≠t last access time
          await this.updateLastAccess(deviceId);
          
          return {
            trusted: true,
            deviceInfo: device,
            deviceId: deviceId
          };
        }
      }
      
      console.log('‚ùå Device not found in trusted list');
      return { trusted: false };
      
    } catch (error) {
      console.error('‚ùå Error checking trusted device:', error);
      return { trusted: false, error: error.message };
    }
  }

  // üîê ƒêƒÉng k√Ω thi·∫øt b·ªã tin c·∫≠y
  async registerTrustedDevice(userId, token, userInfo = {}) {
    try {
      const fingerprint = await this.deviceFingerprint.getFingerprint();
      const now = Date.now();
      
      const deviceInfo = {
        fingerprint: fingerprint,
        userId: userId,
        registeredAt: now,
        lastAccess: now,
        token: token,
        userAgent: navigator.userAgent,
        platform: navigator.platform,
        language: navigator.language,
        screenResolution: `${screen.width}x${screen.height}`,
        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
        userInfo: userInfo,
        status: 'active'
      };
      
      // T·∫°o device ID duy nh·∫•t
      const deviceId = 'device_' + fingerprint.substring(0, 12) + '_' + now;
      
      // L∆∞u v√†o Firebase
      await this.db.ref('trustedDevices/' + deviceId).set(deviceInfo);
      
      console.log('‚úÖ Trusted device registered:', deviceId);
      
      // Log activity
      await this.logDeviceActivity('device_registered', deviceId, userId, {
        message: `Thi·∫øt b·ªã m·ªõi ƒë∆∞·ª£c ƒëƒÉng k√Ω tin c·∫≠y`,
        deviceInfo: deviceInfo
      });
      
      return {
        success: true,
        deviceId: deviceId,
        deviceInfo: deviceInfo
      };
      
    } catch (error) {
      console.error('‚ùå Error registering trusted device:', error);
      return { success: false, error: error.message };
    }
  }

  // üóëÔ∏è X√≥a thi·∫øt b·ªã tin c·∫≠y
  async removeTrustedDevice(deviceId, adminUser = null) {
    try {
      // L·∫•y th√¥ng tin device tr∆∞·ªõc khi x√≥a
      const deviceSnapshot = await this.db.ref('trustedDevices/' + deviceId).once('value');
      const deviceInfo = deviceSnapshot.val();
      
      if (!deviceInfo) {
        return { success: false, error: 'Device not found' };
      }
      
      // X√≥a device
      await this.db.ref('trustedDevices/' + deviceId).remove();
      
      console.log('üóëÔ∏è Trusted device removed:', deviceId);
      
      // Log activity
      await this.logDeviceActivity('device_removed', deviceId, deviceInfo.userId, {
        message: adminUser ? 
          `Thi·∫øt b·ªã b·ªã x√≥a b·ªüi admin: ${adminUser}` : 
          `Thi·∫øt b·ªã t·ª± x√≥a`,
        adminUser: adminUser,
        deviceInfo: deviceInfo
      });
      
      return { success: true, deviceInfo: deviceInfo };
      
    } catch (error) {
      console.error('‚ùå Error removing trusted device:', error);
      return { success: false, error: error.message };
    }
  }

  // üïí C·∫≠p nh·∫≠t th·ªùi gian truy c·∫≠p cu·ªëi
  async updateLastAccess(deviceId) {
    try {
      await this.db.ref('trustedDevices/' + deviceId + '/lastAccess').set(Date.now());
    } catch (error) {
      console.error('‚ùå Error updating last access:', error);
    }
  }

  // üìã L·∫•y danh s√°ch thi·∫øt b·ªã tin c·∫≠y c·ªßa user
  async getUserTrustedDevices(userId) {
    try {
      const snapshot = await this.db.ref('trustedDevices')
        .orderByChild('userId')
        .equalTo(userId)
        .once('value');
      
      const devices = snapshot.val() || {};
      
      return Object.entries(devices).map(([deviceId, deviceInfo]) => ({
        deviceId,
        ...deviceInfo
      }));
      
    } catch (error) {
      console.error('‚ùå Error getting user trusted devices:', error);
      return [];
    }
  }

  // üìä L·∫•y t·∫•t c·∫£ thi·∫øt b·ªã tin c·∫≠y (cho admin)
  async getAllTrustedDevices() {
    try {
      const snapshot = await this.db.ref('trustedDevices').once('value');
      const devices = snapshot.val() || {};
      
      return Object.entries(devices).map(([deviceId, deviceInfo]) => ({
        deviceId,
        ...deviceInfo
      }));
      
    } catch (error) {
      console.error('‚ùå Error getting all trusted devices:', error);
      return [];
    }
  }

  // üìù Log ho·∫°t ƒë·ªông thi·∫øt b·ªã
  async logDeviceActivity(type, deviceId, userId, details = {}) {
    try {
      await this.db.ref('deviceActivityLogs').push({
        type: type,
        deviceId: deviceId,
        userId: userId,
        timestamp: Date.now(),
        fingerprint: await this.deviceFingerprint.getFingerprint(),
        userAgent: navigator.userAgent,
        details: details
      });
    } catch (error) {
      console.error('‚ùå Error logging device activity:', error);
    }
  }

  // üßπ D·ªçn d·∫πp thi·∫øt b·ªã c≈© (t√πy ch·ªçn)
  async cleanupOldDevices(daysOld = 90) {
    try {
      const cutoffTime = Date.now() - (daysOld * 24 * 60 * 60 * 1000);
      const snapshot = await this.db.ref('trustedDevices').once('value');
      const devices = snapshot.val() || {};
      
      const devicesToRemove = [];
      
      for (const [deviceId, deviceInfo] of Object.entries(devices)) {
        if (deviceInfo.lastAccess < cutoffTime) {
          devicesToRemove.push(deviceId);
        }
      }
      
      // X√≥a c√°c thi·∫øt b·ªã c≈©
      for (const deviceId of devicesToRemove) {
        await this.removeTrustedDevice(deviceId, 'AUTO_CLEANUP');
      }
      
      console.log(`üßπ Cleaned up ${devicesToRemove.length} old devices`);
      return devicesToRemove.length;
      
    } catch (error) {
      console.error('‚ùå Error cleaning up old devices:', error);
      return 0;
    }
  }
}

// ===== GLOBAL INSTANCE =====
// S·∫Ω ƒë∆∞·ª£c kh·ªüi t·∫°o sau khi Firebase ready
let trustedDeviceManager = null;